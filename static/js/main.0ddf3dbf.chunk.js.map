{"version":3,"sources":["ReactApolloGraphQL/Apollo.js","App.js","serviceWorker.js","index.js"],"names":["Apollo","link","createHttpLink","uri","credentials","client","ApolloClient","cache","InMemoryCache","Rocket","useQuery","gql","loading","error","data","JSON","stringify","Container","CardDeck","className","launchesPast","length","map","launchResult","index","links","flickr_images","key","Card","style","margin","Img","src","alt","href","Body","padding","Title","mission_name","Text","launch_site","site_name_long","Footer","launch_date_local","video_link","size","color","icon","faYoutube","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"omBAae,SAASA,IAEtB,IAAMC,EAAOC,yBAAe,CAC1BC,IAAK,mCACLC,YAAa,gBAETC,EAAS,IAAIC,eAAa,CAC9BL,OACAM,MAAO,IAAIC,kBAGPC,EAAS,WAAO,IAAD,EACaC,mBAASC,cAAA,MAAlCC,EADY,EACZA,QAASC,EADG,EACHA,MAAOC,EADJ,EACIA,KAkBzB,OAAIF,EAAgB,yCAChBC,EAAc,oCAAUE,KAAKC,UAAUH,IAEzC,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUC,UAAU,OACnBL,EAAKM,aAAaC,OAAO,GAAKP,EAAKM,aAAaE,KAAI,SAACC,EAAcC,GAAf,OACnDD,EAAaE,MAAMC,cAAcL,OAAS,GAC1C,kBAACJ,EAAA,EAAD,CAAWE,UAAU,qCAAqCQ,IAAKH,GAC7D,kBAACI,EAAA,EAAD,CAAMC,MAAO,CAACC,OAAQ,UACpB,yBAAKX,UAAU,gBACb,kBAACS,EAAA,EAAKG,IAAN,CAAUZ,UAAU,qBAAqBa,IAAKT,EAAaE,MAAMC,cAAc,GAAIO,IAAI,sBACvF,uBAAGC,KAAK,MACN,yBAAKf,UAAU,6BAGnB,kBAACS,EAAA,EAAKO,KAAN,CAAWN,MAAO,CAACC,OAAQ,cAAeM,QAAS,UACjD,kBAACR,EAAA,EAAKS,MAAN,KACE,kBAACT,EAAA,EAAKS,MAAN,KAAad,EAAae,eAE5B,kBAACV,EAAA,EAAKW,KAAN,KACE,4BAAKhB,EAAaiB,YAAYC,kBAGlC,kBAACb,EAAA,EAAKc,OAAN,CAAavB,UAAU,kCACrB,6BAAMI,EAAaoB,mBACnB,uBAAGT,KAAMX,EAAaE,MAAMmB,YAC1B,kBAAC,IAAD,CAAiBC,KAAK,KAAKC,MAAM,UAAUC,KAAMC,gBAW/D,OACE,kBAAC/B,EAAA,EAAD,KACE,kBAAC,iBAAD,CAAgBZ,OAAQA,GACtB,kBAACI,EAAD,Q,OCtEOwC,MARf,WACE,OACA,yBAAK9B,UAAU,OACb,kBAACnB,EAAD,QCIgBkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArD,GACLsD,QAAQtD,MAAMA,EAAMuD,a","file":"static/js/main.0ddf3dbf.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  useQuery,\r\n  gql,\r\n  createHttpLink\r\n} from \"@apollo/client\"\r\nimport {Container, Card, CardDeck} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faYoutube } from '@fortawesome/free-brands-svg-icons'\r\n\r\nexport default function Apollo() {\r\n\r\n  const link = createHttpLink({\r\n    uri: 'https://api.spacex.land/graphql/',\r\n    credentials: 'same-origin'\r\n  })\r\n  const client = new ApolloClient({\r\n    link,\r\n    cache: new InMemoryCache(),\r\n  })\r\n  \r\n  const Rocket = () => {\r\n   const { loading, error, data } = useQuery(gql`\r\n    query {\r\n      launchesPast (limit: 20){\r\n        mission_name\r\n        launch_date_local\r\n        launch_site {\r\n          site_name_long\r\n        }\r\n        links {\r\n          video_link\r\n          flickr_images\r\n        }\r\n        rocket {\r\n          rocket_name\r\n        }\r\n      }\r\n    }\r\n  `);\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error {JSON.stringify(error)}</p>;\r\n  return (\r\n    <Container>\r\n      <CardDeck className=\"row\" >\r\n      {data.launchesPast.length>0 && data.launchesPast.map((launchResult, index) => (\r\n        launchResult.links.flickr_images.length > 0 && ( \r\n        <Container className=\"col-xs-12 col-sm-6 col-md-4 column\" key={index}>\r\n          <Card style={{margin: \"5% 0%\"}}>\r\n            <div className=\"view overlay\">\r\n              <Card.Img className=\"card-img-top image\" src={launchResult.links.flickr_images[0]} alt=\"holder.js/300x200\" />\r\n              <a href=\"#!\">\r\n                <div className=\"mask rgba-white-slight\"></div>\r\n              </a>\r\n            </div>\r\n            <Card.Body style={{margin: \"0% 0% 0% 3%\", padding: \"6% 0%\"}}>\r\n              <Card.Title>\r\n                <Card.Title>{launchResult.mission_name}</Card.Title>\r\n              </Card.Title>\r\n              <Card.Text>\r\n                <li>{launchResult.launch_site.site_name_long}</li>\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer className=\"d-flex justify-content-between\">\r\n              <div>{launchResult.launch_date_local}</div>\r\n              <a href={launchResult.links.video_link}>\r\n                <FontAwesomeIcon size=\"2x\" color=\"#FF0000\" icon={faYoutube}/>\r\n              </a>\r\n            </Card.Footer>\r\n          </Card>\r\n        </Container>\r\n        )\r\n      ))}\r\n      </CardDeck>\r\n    </Container> \r\n  ) \r\n}\r\n  return (\r\n    <Container>\r\n      <ApolloProvider client={client}>\r\n        <Rocket/>\r\n      </ApolloProvider>\r\n    </Container>\r\n  )\r\n}","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Apollo from './ReactApolloGraphQL/Apollo'\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  return (\r\n  <div className=\"app\">\r\n    <Apollo/>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}