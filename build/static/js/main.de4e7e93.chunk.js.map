{"version":3,"sources":["ReactApolloGraphQL/Apollo.jsx","App.js","reportWebVitals.js","index.js"],"names":["Apollo","link","createHttpLink","uri","credentials","client","ApolloClient","cache","InMemoryCache","Rocket","useQuery","gql","loading","error","data","style","display","placeItems","Spinner","animation","JSON","stringify","Container","CardDeck","className","launchesPast","length","map","launchResult","index","links","flickr_images","Card","margin","Img","src","alt","href","Body","padding","Title","mission_name","Text","launch_site","site_name_long","Footer","launch_date_local","video_link","size","color","icon","faYoutube","ApolloProvider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wUAae,SAASA,IAEtB,IAAMC,EAAOC,YAAe,CAC1BC,IAAK,mCACLC,YAAa,gBAETC,EAAS,IAAIC,IAAa,CAC9BL,OACAM,MAAO,IAAIC,MAGPC,EAAS,WACd,MAAiCC,YAASC,YAAA,IAAD,qUAAjCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAkBzB,OAAIF,EAEF,qBAAKG,MAAO,CAACC,QAAS,OAAQC,WAAY,UAA1C,SACE,cAACC,EAAA,EAAD,CAASC,UAAU,WAGnBN,EAAc,uCAAUO,KAAKC,UAAUR,MAEzC,cAACS,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAUC,UAAU,MAApB,SACCV,EAAKW,aAAaC,OAAO,GAAKZ,EAAKW,aAAaE,KAAI,SAACC,EAAcC,GAAf,OACnDD,EAAaE,MAAMC,cAAcL,OAAS,GAC1C,cAACJ,EAAA,EAAD,CAAWE,UAAU,qCAArB,SACE,eAACQ,EAAA,EAAD,CAAMjB,MAAO,CAACkB,OAAQ,SAAtB,UACE,sBAAKT,UAAU,eAAf,UACE,cAACQ,EAAA,EAAKE,IAAN,CAAUV,UAAU,qBAAqBW,IAAKP,EAAaE,MAAMC,cAAc,GAAIK,IAAI,sBACvF,mBAAGC,KAAK,KAAR,SACE,qBAAKb,UAAU,gCAGnB,eAACQ,EAAA,EAAKM,KAAN,CAAWvB,MAAO,CAACkB,OAAQ,cAAeM,QAAS,SAAnD,UACE,cAACP,EAAA,EAAKQ,MAAN,UACE,cAACR,EAAA,EAAKQ,MAAN,UAAaZ,EAAaa,iBAE5B,cAACT,EAAA,EAAKU,KAAN,UACE,6BAAKd,EAAae,YAAYC,sBAGlC,eAACZ,EAAA,EAAKa,OAAN,CAAarB,UAAU,iCAAvB,UACE,8BAAMI,EAAakB,oBACnB,mBAAGT,KAAMT,EAAaE,MAAMiB,WAA5B,SACE,cAAC,IAAD,CAAiBC,KAAK,KAAKC,MAAM,UAAUC,KAAMC,eAnBMtB,WA8BrE,OACE,cAACP,EAAA,EAAD,UACE,cAAC8B,EAAA,EAAD,CAAgB/C,OAAQA,EAAxB,SACE,cAACI,EAAD,QC3EO4C,MARf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAACxB,EAAD,OCISsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.de4e7e93.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  useQuery,\r\n  gql,\r\n  createHttpLink\r\n} from \"@apollo/client\"\r\nimport {Container, Card, CardDeck, Spinner} from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faYoutube } from '@fortawesome/free-brands-svg-icons'\r\n\r\nexport default function Apollo() {\r\n\r\n  const link = createHttpLink({\r\n    uri: 'https://api.spacex.land/graphql/',\r\n    credentials: 'same-origin'\r\n  })\r\n  const client = new ApolloClient({\r\n    link,\r\n    cache: new InMemoryCache(),\r\n  })\r\n  \r\n  const Rocket = () => {\r\n   const { loading, error, data } = useQuery(gql`\r\n    query {\r\n      launchesPast (limit: 20){\r\n        mission_name\r\n        launch_date_local\r\n        launch_site {\r\n          site_name_long\r\n        }\r\n        links {\r\n          video_link\r\n          flickr_images\r\n        }\r\n        rocket {\r\n          rocket_name\r\n        }\r\n      }\r\n    }\r\n  `);\r\n  if (loading){  \r\n    return(  \r\n    <div style={{display: \"grid\", placeItems: \"center\"}}>\r\n      <Spinner animation=\"grow\" />\r\n    </div>\r\n  )}\r\n  if (error) return <p>Error {JSON.stringify(error)}</p>;\r\n  return (\r\n    <Container>\r\n      <CardDeck className=\"row\" >\r\n      {data.launchesPast.length>0 && data.launchesPast.map((launchResult, index) => (\r\n        launchResult.links.flickr_images.length > 0 && ( \r\n        <Container className=\"col-xs-12 col-sm-6 col-md-4 column\" key={index}>\r\n          <Card style={{margin: \"5% 0%\"}}>\r\n            <div className=\"view overlay\">\r\n              <Card.Img className=\"card-img-top image\" src={launchResult.links.flickr_images[0]} alt=\"holder.js/300x200\" />\r\n              <a href=\"#!\">\r\n                <div className=\"mask rgba-white-slight\"></div>\r\n              </a>\r\n            </div>\r\n            <Card.Body style={{margin: \"0% 0% 0% 3%\", padding: \"6% 0%\"}}>\r\n              <Card.Title>\r\n                <Card.Title>{launchResult.mission_name}</Card.Title>\r\n              </Card.Title>\r\n              <Card.Text>\r\n                <li>{launchResult.launch_site.site_name_long}</li>\r\n              </Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer className=\"d-flex justify-content-between\">\r\n              <div>{launchResult.launch_date_local}</div>\r\n              <a href={launchResult.links.video_link}>\r\n                <FontAwesomeIcon size=\"2x\" color=\"#FF0000\" icon={faYoutube}/>\r\n              </a>\r\n            </Card.Footer>\r\n          </Card>\r\n        </Container>\r\n        )\r\n      ))}\r\n      </CardDeck>\r\n    </Container> \r\n  ) \r\n}\r\n  return (\r\n    <Container>\r\n      <ApolloProvider client={client}>\r\n        <Rocket/>\r\n      </ApolloProvider>\r\n    </Container>\r\n  )\r\n}","import React from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Apollo from './ReactApolloGraphQL/Apollo'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Apollo/>\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}